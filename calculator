<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Debt Payoff Calculator with Timeline</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .container { max-width: 800px; margin: 0 auto; }
        .input-group { margin-bottom: 15px; }
        .input-group label { display: block; margin-bottom: 5px; font-weight: bold; }
        .input-group input { width: 100%; padding: 8px; box-sizing: border-box; }
        .debt-group { border: 1px solid #ccc; padding: 15px; margin-bottom: 20px; border-radius: 5px; }
        button { padding: 10px 20px; background: #007BFF; color: white; border: none; border-radius: 5px; cursor: pointer; }
        button:hover { background: #0056b3; }
        .add-debt-button { background: #28a745; margin-bottom: 20px; }
        .results pre { background: #f4f4f4; padding: 10px; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Debt Payoff Calculator with Timeline</h1>
        
        <!-- Start Date -->
        <div class="input-group">
            <label for="start-date">Start Date:</label>
            <input type="date" id="start-date" required>
        </div>

        <!-- Monthly Payment and Bonus -->
        <div class="input-group">
            <label for="monthly-payment">Monthly Payment Capacity ($):</label>
            <input type="number" id="monthly-payment" placeholder="e.g., 1221" required>
        </div>
        <div class="input-group">
            <label for="bonus">Bonus Payment ($):</label>
            <input type="number" id="bonus" placeholder="e.g., 900">
        </div>

        <!-- Debt Input Fields -->
        <h2>Debt Information</h2>
        <div id="debt-container">
            <div class="debt-group">
                <div class="input-group"><label>Debt Name: <input type="text" placeholder="Credit Card 1"></label></div>
                <div class="input-group"><label>Balance ($): <input type="number" placeholder="e.g., 5000"></label></div>
                <div class="input-group"><label>Interest Rate (%): <input type="number" placeholder="e.g., 29.99"></label></div>
                <div class="input-group"><label>Credit Limit ($): <input type="number" placeholder="e.g., 10000"></label></div>
                <div class="input-group"><label>Minimum Payment ($): <input type="number" placeholder="e.g., 100"></label></div>
            </div>
        </div>

        <!-- Add Debt Button -->
        <button class="add-debt-button" onclick="addDebtGroup()">Add Debt</button>

        <!-- Calculate Button -->
        <button onclick="calculatePayoffPlan()">Calculate Payoff Plan</button>

        <!-- Results Section -->
        <div class="results">
            <h2>Payoff Timeline</h2>
            <pre id="output"></pre>
        </div>
    </div>

    <script>
        let debtCounter = 1;

        function addDebtGroup() {
            debtCounter++;
            const debtContainer = document.getElementById('debt-container');
            const newDebtGroup = document.createElement('div');
            newDebtGroup.className = 'debt-group';
            newDebtGroup.innerHTML = `
                <div class="input-group"><label>Debt Name: <input type="text" placeholder="Credit Card ${debtCounter}"></label></div>
                <div class="input-group"><label>Balance ($): <input type="number"></label></div>
                <div class="input-group"><label>Interest Rate (%): <input type="number"></label></div>
                <div class="input-group"><label>Credit Limit ($): <input type="number"></label></div>
                <div class="input-group"><label>Minimum Payment ($): <input type="number"></label></div>
            `;
            debtContainer.appendChild(newDebtGroup);
        }

        function calculatePayoffPlan() {
            // Get inputs
            const startDate = new Date(document.getElementById('start-date').value);
            const monthlyPayment = parseFloat(document.getElementById('monthly-payment').value);
            const bonus = parseFloat(document.getElementById('bonus').value || 0);

            // Get debts
            const debts = [];
            const debtGroups = document.querySelectorAll('.debt-group');
            debtGroups.forEach((group, index) => {
                const inputs = group.querySelectorAll('input');
                debts.push({
                    name: inputs[0].value || `Debt ${index + 1}`,
                    balance: parseFloat(inputs[1].value),
                    interestRate: parseFloat(inputs[2].value),
                    creditLimit: parseFloat(inputs[3].value),
                    minPayment: parseFloat(inputs[4].value),
                });
            });

            // Initialize timeline
            let currentDate = new Date(startDate);
            let output = [];
            
            // Phase 1: Reduce utilization
            output.push("=== PHASE 1: REDUCE UTILIZATION ===");
            let extraFunds = monthlyPayment - debts.reduce((sum, debt) => sum + debt.minPayment, 0);
            
            // Apply bonus to highest interest debt
            const highestInterestDebt = debts.reduce((a, b) => (a.interestRate > b.interestRate ? a : b));
            highestInterestDebt.balance -= bonus;
            output.push(`${formatDate(currentDate)}: Applied $${bonus} bonus to ${highestInterestDebt.name}`);

            // Reduce utilization for other debts
            debts.sort((a, b) => (a.balance/a.creditLimit) - (b.balance/b.creditLimit)); // Sort by utilization
            debts.forEach(debt => {
                if (debt.balance > 0) {
                    currentDate.setMonth(currentDate.getMonth() + 1);
                    const targetBalance = debt.creditLimit * 0.3;
                    const payment = Math.min(extraFunds, debt.balance - targetBalance);
                    debt.balance -= payment;
                    output.push(`${formatDate(currentDate)}: Paid $${payment.toFixed(2)} to ${debt.name}`);
                }
            });

            // Phase 2: Avalanche method
            output.push("\n=== PHASE 2: AVALANCHE METHOD ===");
            debts.sort((a, b) => b.interestRate - a.interestRate); // Sort by interest rate
            
            while (debts.some(debt => debt.balance > 0)) {
                currentDate.setMonth(currentDate.getMonth() + 1);
                const debt = debts.find(d => d.balance > 0);
                const payment = Math.min(extraFunds, debt.balance);
                debt.balance -= payment;
                output.push(`${formatDate(currentDate)}: Paid $${payment.toFixed(2)} to ${debt.name}`);
            }

            // Display results
            document.getElementById('output').textContent = output.join('\n');
        }

        function formatDate(date) {
            return date.toLocaleString('default', { month: 'short', year: 'numeric' });
        }
    </script>
</body>
</html>